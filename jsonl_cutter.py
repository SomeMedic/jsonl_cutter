import json
import io
import zipfile
import streamlit as st

st.set_page_config(page_title="üìÇ JSONL Splitter", layout="centered")
st.title("üìÇ JSONL Splitter")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .jsonl —Ñ–∞–π–ª", type="jsonl")
lines_per_file = st.number_input("–°—Ç—Ä–æ–∫ –Ω–∞ —Ñ–∞–π–ª", min_value=1, value=1000)

output_format = st.radio(
    "–§–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
    ["JSON (—á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π, —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏)", "JSONL (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)"]
)

log_messages = []

def log(msg):
    log_messages.append(msg)

if uploaded_file and st.button("üöÄ –†–∞–∑–¥–µ–ª–∏—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å ZIP"):
    jsonl_lines = uploaded_file.read().decode("utf-8", errors="ignore").splitlines()
    total_lines = len(jsonl_lines)

    buffer = []
    zip_buffer = io.BytesIO()
    part_number = 1
    success_count = 0
    error_count = 0

    with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
        for idx, line in enumerate(jsonl_lines, start=1):
            try:
                obj = json.loads(line)
                buffer.append((obj, line))  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ json, –∏ –∏—Å—Ö–æ–¥–Ω–∏–∫
                success_count += 1
                log(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {idx}: —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞")
            except json.JSONDecodeError as e:
                error_count += 1
                log(f"‚ùå –°—Ç—Ä–æ–∫–∞ {idx}: –æ—à–∏–±–∫–∞ JSON - {str(e)}")
                continue

            if len(buffer) == lines_per_file:
                if "JSONL" in output_format:
                    content = "\n".join(orig_line for _, orig_line in buffer)
                    filename = f"part_{part_number}.jsonl"
                else:
                    content = json.dumps([obj for obj, _ in buffer], indent=2, ensure_ascii=False)
                    filename = f"part_{part_number}.json"

                zipf.writestr(filename, content)
                log(f"üì¶ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª {filename} —Å {len(buffer)} —Å—Ç—Ä–æ–∫–∞–º–∏")
                part_number += 1
                buffer = []

        if buffer:
            if "JSONL" in output_format:
                content = "\n".join(orig_line for _, orig_line in buffer)
                filename = f"part_{part_number}.jsonl"
            else:
                content = json.dumps([obj for obj, _ in buffer], indent=2, ensure_ascii=False)
                filename = f"part_{part_number}.json"

            zipf.writestr(filename, content)
            log(f"üì¶ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª {filename} —Å {len(buffer)} —Å—Ç—Ä–æ–∫–∞–º–∏")

    zip_buffer.seek(0)
    st.success(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: —Å—Ç—Ä–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {total_lines}, —É—Å–ø–µ—à–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {error_count}, —Ñ–∞–π–ª–æ–≤: {part_number}")

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤",
        data=zip_buffer,
        file_name="jsonl_parts.zip",
        mime="application/zip"
    )

    with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"):
        st.text("\n".join(log_messages))
